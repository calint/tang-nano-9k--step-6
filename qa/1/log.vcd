$date
	Thu Jun  6 15:40:50 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module TestBench $end
$var wire 1 ! data_out_ready $end
$var wire 32 " data_out [31:0] $end
$var parameter 32 # clk_tk $end
$var reg 32 $ address [31:0] $end
$var reg 1 % clk $end
$var reg 32 & data_in [31:0] $end
$var reg 1 ' sys_rst_n $end
$var reg 4 ( write_enable [3:0] $end
$var integer 32 ) i [31:0] $end
$scope module cache $end
$var wire 32 * address [31:0] $end
$var wire 1 % clk $end
$var wire 32 + data_in [31:0] $end
$var wire 1 ' rst_n $end
$var wire 4 , write_enable [3:0] $end
$var wire 1 - line_valid $end
$var wire 17 . line_tag_in [16:0] $end
$var wire 32 / line_tag_and_valid_dirty [31:0] $end
$var wire 17 0 line_tag [16:0] $end
$var wire 10 1 line_ix [9:0] $end
$var wire 1 2 line_dirty $end
$var wire 32 3 data7_out [31:0] $end
$var wire 32 4 data6_out [31:0] $end
$var wire 32 5 data5_out [31:0] $end
$var wire 32 6 data4_out [31:0] $end
$var wire 32 7 data3_out [31:0] $end
$var wire 32 8 data2_out [31:0] $end
$var wire 32 9 data1_out [31:0] $end
$var wire 32 : data0_out [31:0] $end
$var wire 3 ; column_ix [2:0] $end
$var parameter 32 < COLUMN_IX_BITWIDTH $end
$var parameter 32 = LINE_COUNT $end
$var parameter 36 > LINE_DIRTY_BIT $end
$var parameter 32 ? LINE_IX_BITWIDTH $end
$var parameter 35 @ LINE_VALID_BIT $end
$var parameter 35 A TAG_BITWIDTH $end
$var parameter 32 B ZEROS_BITWIDTH $end
$var reg 32 C data_out [31:0] $end
$var reg 1 ! data_out_ready $end
$var reg 4 D write_enable_0 [3:0] $end
$var reg 4 E write_enable_1 [3:0] $end
$var reg 4 F write_enable_2 [3:0] $end
$var reg 4 G write_enable_3 [3:0] $end
$var reg 4 H write_enable_4 [3:0] $end
$var reg 4 I write_enable_5 [3:0] $end
$var reg 4 J write_enable_6 [3:0] $end
$var reg 4 K write_enable_7 [3:0] $end
$var reg 4 L write_enable_tag [3:0] $end
$scope module data0 $end
$var wire 10 M address [9:0] $end
$var wire 1 % clk $end
$var wire 32 N data_in [31:0] $end
$var wire 32 O data_out [31:0] $end
$var wire 4 P write_enable [3:0] $end
$var parameter 32 Q ADDRESS_BITWIDTH $end
$var parameter 32 R COLUMN_BITWIDTH $end
$var parameter 32 S COLUMN_COUNT $end
$var parameter 32 T DATA_BITWIDTH $end
$var parameter 0 U DATA_FILE $end
$var integer 32 V i [31:0] $end
$upscope $end
$scope module data1 $end
$var wire 10 W address [9:0] $end
$var wire 1 % clk $end
$var wire 32 X data_in [31:0] $end
$var wire 32 Y data_out [31:0] $end
$var wire 4 Z write_enable [3:0] $end
$var parameter 32 [ ADDRESS_BITWIDTH $end
$var parameter 32 \ COLUMN_BITWIDTH $end
$var parameter 32 ] COLUMN_COUNT $end
$var parameter 32 ^ DATA_BITWIDTH $end
$var parameter 0 _ DATA_FILE $end
$var integer 32 ` i [31:0] $end
$upscope $end
$scope module data2 $end
$var wire 10 a address [9:0] $end
$var wire 1 % clk $end
$var wire 32 b data_in [31:0] $end
$var wire 32 c data_out [31:0] $end
$var wire 4 d write_enable [3:0] $end
$var parameter 32 e ADDRESS_BITWIDTH $end
$var parameter 32 f COLUMN_BITWIDTH $end
$var parameter 32 g COLUMN_COUNT $end
$var parameter 32 h DATA_BITWIDTH $end
$var parameter 0 i DATA_FILE $end
$var integer 32 j i [31:0] $end
$upscope $end
$scope module data3 $end
$var wire 10 k address [9:0] $end
$var wire 1 % clk $end
$var wire 32 l data_in [31:0] $end
$var wire 32 m data_out [31:0] $end
$var wire 4 n write_enable [3:0] $end
$var parameter 32 o ADDRESS_BITWIDTH $end
$var parameter 32 p COLUMN_BITWIDTH $end
$var parameter 32 q COLUMN_COUNT $end
$var parameter 32 r DATA_BITWIDTH $end
$var parameter 0 s DATA_FILE $end
$var integer 32 t i [31:0] $end
$upscope $end
$scope module data4 $end
$var wire 10 u address [9:0] $end
$var wire 1 % clk $end
$var wire 32 v data_in [31:0] $end
$var wire 32 w data_out [31:0] $end
$var wire 4 x write_enable [3:0] $end
$var parameter 32 y ADDRESS_BITWIDTH $end
$var parameter 32 z COLUMN_BITWIDTH $end
$var parameter 32 { COLUMN_COUNT $end
$var parameter 32 | DATA_BITWIDTH $end
$var parameter 0 } DATA_FILE $end
$var integer 32 ~ i [31:0] $end
$upscope $end
$scope module data5 $end
$var wire 10 !" address [9:0] $end
$var wire 1 % clk $end
$var wire 32 "" data_in [31:0] $end
$var wire 32 #" data_out [31:0] $end
$var wire 4 $" write_enable [3:0] $end
$var parameter 32 %" ADDRESS_BITWIDTH $end
$var parameter 32 &" COLUMN_BITWIDTH $end
$var parameter 32 '" COLUMN_COUNT $end
$var parameter 32 (" DATA_BITWIDTH $end
$var parameter 0 )" DATA_FILE $end
$var integer 32 *" i [31:0] $end
$upscope $end
$scope module data6 $end
$var wire 10 +" address [9:0] $end
$var wire 1 % clk $end
$var wire 32 ," data_in [31:0] $end
$var wire 32 -" data_out [31:0] $end
$var wire 4 ." write_enable [3:0] $end
$var parameter 32 /" ADDRESS_BITWIDTH $end
$var parameter 32 0" COLUMN_BITWIDTH $end
$var parameter 32 1" COLUMN_COUNT $end
$var parameter 32 2" DATA_BITWIDTH $end
$var parameter 0 3" DATA_FILE $end
$var integer 32 4" i [31:0] $end
$upscope $end
$scope module data7 $end
$var wire 10 5" address [9:0] $end
$var wire 1 % clk $end
$var wire 32 6" data_in [31:0] $end
$var wire 32 7" data_out [31:0] $end
$var wire 4 8" write_enable [3:0] $end
$var parameter 32 9" ADDRESS_BITWIDTH $end
$var parameter 32 :" COLUMN_BITWIDTH $end
$var parameter 32 ;" COLUMN_COUNT $end
$var parameter 32 <" DATA_BITWIDTH $end
$var parameter 0 =" DATA_FILE $end
$var integer 32 >" i [31:0] $end
$upscope $end
$scope module tag $end
$var wire 10 ?" address [9:0] $end
$var wire 1 % clk $end
$var wire 32 @" data_in [31:0] $end
$var wire 32 A" data_out [31:0] $end
$var wire 4 B" write_enable [3:0] $end
$var parameter 32 C" ADDRESS_BITWIDTH $end
$var parameter 32 D" COLUMN_BITWIDTH $end
$var parameter 32 E" COLUMN_COUNT $end
$var parameter 32 F" DATA_BITWIDTH $end
$var parameter 0 G" DATA_FILE $end
$var integer 32 H" i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b G"
b100000 F"
b100 E"
b1000 D"
b1010 C"
b ="
b100000 <"
b100 ;"
b1000 :"
b1010 9"
b 3"
b100000 2"
b100 1"
b1000 0"
b1010 /"
b )"
b100000 ("
b100 '"
b1000 &"
b1010 %"
b }
b100000 |
b100 {
b1000 z
b1010 y
b s
b100000 r
b100 q
b1000 p
b1010 o
b i
b100000 h
b100 g
b1000 f
b1010 e
b _
b100000 ^
b100 ]
b1000 \
b1010 [
b U
b100000 T
b100 S
b1000 R
b1010 Q
b10 B
b10001 A
b10001 @
b1010 ?
b10010 >
b10000000000 =
b11 <
b100 #
$end
#0
$dumpvars
b100 H"
bx B"
bx A"
b1xxxxxxxxxxxxxxxxx @"
bx ?"
b100 >"
bx 8"
bx 7"
bx 6"
bx 5"
b100 4"
bx ."
bx -"
bx ,"
bx +"
b100 *"
bx $"
bx #"
bx ""
bx !"
b100 ~
bx x
bx w
bx v
bx u
b100 t
bx n
bx m
bx l
bx k
b100 j
bx d
bx c
bx b
bx a
b100 `
bx Z
bx Y
bx X
bx W
b100 V
bx P
bx O
bx N
bx M
bx L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
x2
bx 1
bx 0
bx /
bx .
x-
bx ,
bx +
bx *
b10000000000 )
bx (
0'
bx &
1%
bx $
bx "
x!
$end
#2000
0%
#4000
0!
b0 0
02
0-
b0 K
b0 8"
b0 J
b0 ."
b0 I
b0 $"
b0 H
b0 x
b0 G
b0 n
b0 F
b0 d
b1111 E
b1111 Z
b0 D
b0 P
b1111 L
b1111 B"
b11111111111111111111111111111111 "
b11111111111111111111111111111111 C
b1 ;
b11111111111111111111111111111111 :
b11111111111111111111111111111111 O
b11111111111111111111111111111111 9
b11111111111111111111111111111111 Y
b11111111111111111111111111111111 8
b11111111111111111111111111111111 c
b11111111111111111111111111111111 7
b11111111111111111111111111111111 m
b0 /
b0 A"
b0 1
b0 M
b0 W
b0 a
b0 k
b0 u
b0 !"
b0 +"
b0 5"
b0 ?"
b100000000000000000 @"
b0 .
b1111 (
b1111 ,
b10101011110011011110111100010010 &
b10101011110011011110111100010010 +
b10101011110011011110111100010010 N
b10101011110011011110111100010010 X
b10101011110011011110111100010010 b
b10101011110011011110111100010010 l
b10101011110011011110111100010010 v
b10101011110011011110111100010010 ""
b10101011110011011110111100010010 ,"
b10101011110011011110111100010010 6"
b100 $
b100 *
1'
b100 >"
b100 4"
b100 *"
b100 ~
b100 t
b100 j
b100 `
b100 V
b100 H"
1%
#6000
0%
#8000
1!
1-
b1111 F
b1111 d
b0 E
b0 Z
b1111 L
b1111 B"
b10 ;
b100000000000000000 /
b100000000000000000 A"
b10101011110011011110111100010010 9
b10101011110011011110111100010010 Y
b10101011110011010001001000110100 &
b10101011110011010001001000110100 +
b10101011110011010001001000110100 N
b10101011110011010001001000110100 X
b10101011110011010001001000110100 b
b10101011110011010001001000110100 l
b10101011110011010001001000110100 v
b10101011110011010001001000110100 ""
b10101011110011010001001000110100 ,"
b10101011110011010001001000110100 6"
b1000 $
b1000 *
b100 H"
b100 V
b100 `
b100 j
b100 t
b100 ~
b100 *"
b100 4"
b100 >"
1%
#10000
0%
#12000
b0 F
b0 d
b0 L
b0 B"
b10101011110011011110111100010010 "
b10101011110011011110111100010010 C
b1 ;
b10101011110011010001001000110100 8
b10101011110011010001001000110100 c
b0 (
b0 ,
b100 $
b100 *
b100 >"
b100 4"
b100 *"
b100 ~
b100 t
b100 j
b100 `
b100 V
b100 H"
1%
#14000
0%
#16000
b10101011110011010001001000110100 "
b10101011110011010001001000110100 C
b10 ;
b1000 $
b1000 *
b100 H"
b100 V
b100 `
b100 j
b100 t
b100 ~
b100 *"
b100 4"
b100 >"
1%
#18000
0%
#20000
0!
b11111111111111111111111111111111 "
b11111111111111111111111111111111 C
0-
b0 ;
b11111111111111111111111111111111 9
b11111111111111111111111111111111 Y
b11111111111111111111111111111111 8
b11111111111111111111111111111111 c
b0 /
b0 A"
b1 1
b1 M
b1 W
b1 a
b1 k
b1 u
b1 !"
b1 +"
b1 5"
b1 ?"
b100000 $
b100000 *
b100 >"
b100 4"
b100 *"
b100 ~
b100 t
b100 j
b100 `
b100 V
b100 H"
1%
#22000
0%
#24000
b1 ;
b100100 $
b100100 *
b100 H"
b100 V
b100 `
b100 j
b100 t
b100 ~
b100 *"
b100 4"
b100 >"
1%
#26000
0%
#28000
1!
b10101011110011010001001000110100 "
b10101011110011010001001000110100 C
1-
b10 ;
b10101011110011011110111100010010 9
b10101011110011011110111100010010 Y
b10101011110011010001001000110100 8
b10101011110011010001001000110100 c
b100000000000000000 /
b100000000000000000 A"
b0 1
b0 M
b0 W
b0 a
b0 k
b0 u
b0 !"
b0 +"
b0 5"
b0 ?"
b1000 $
b1000 *
b100 >"
b100 4"
b100 *"
b100 ~
b100 t
b100 j
b100 `
b100 V
b100 H"
1%
#30000
0%
#32000
b1 F
b1 d
b1111 L
b1111 B"
b1 (
b1 ,
b10101011 &
b10101011 +
b10101011 N
b10101011 X
b10101011 b
b10101011 l
b10101011 v
b10101011 ""
b10101011 ,"
b10101011 6"
b100 H"
b100 V
b100 `
b100 j
b100 t
b100 ~
b100 *"
b100 4"
b100 >"
1%
#34000
0%
#36000
b0 F
b0 d
b0 L
b0 B"
b10101011110011010001001010101011 "
b10101011110011010001001010101011 C
b10101011110011010001001010101011 8
b10101011110011010001001010101011 c
b0 (
b0 ,
b100 >"
b100 4"
b100 *"
b100 ~
b100 t
b100 j
b100 `
b100 V
b100 H"
1%
#38000
0%
#40000
b11 F
b11 d
b1111 L
b1111 B"
b11 (
b11 ,
b1000011101100101 &
b1000011101100101 +
b1000011101100101 N
b1000011101100101 X
b1000011101100101 b
b1000011101100101 l
b1000011101100101 v
b1000011101100101 ""
b1000011101100101 ,"
b1000011101100101 6"
b100 H"
b100 V
b100 `
b100 j
b100 t
b100 ~
b100 *"
b100 4"
b100 >"
1%
#42000
0%
#44000
b0 F
b0 d
b0 L
b0 B"
b10101011110011011000011101100101 "
b10101011110011011000011101100101 C
b10101011110011011000011101100101 8
b10101011110011011000011101100101 c
b0 (
b0 ,
b100 >"
b100 4"
b100 *"
b100 ~
b100 t
b100 j
b100 `
b100 V
b100 H"
1%
#46000
0%
#48000
b1100 F
b1100 d
b1111 L
b1111 B"
b1100 (
b1100 ,
b11111110111011110000000000000000 &
b11111110111011110000000000000000 +
b11111110111011110000000000000000 N
b11111110111011110000000000000000 X
b11111110111011110000000000000000 b
b11111110111011110000000000000000 l
b11111110111011110000000000000000 v
b11111110111011110000000000000000 ""
b11111110111011110000000000000000 ,"
b11111110111011110000000000000000 6"
b100 H"
b100 V
b100 `
b100 j
b100 t
b100 ~
b100 *"
b100 4"
b100 >"
1%
#50000
0%
#52000
b0 F
b0 d
b0 L
b0 B"
b11111110111011111000011101100101 "
b11111110111011111000011101100101 C
b11111110111011111000011101100101 8
b11111110111011111000011101100101 c
b0 (
b0 ,
b100 >"
b100 4"
b100 *"
b100 ~
b100 t
b100 j
b100 `
b100 V
b100 H"
1%
#54000
0%
#56000
b100 H"
b100 V
b100 `
b100 j
b100 t
b100 ~
b100 *"
b100 4"
b100 >"
1%
#58000
0%
#60000
b100 >"
b100 4"
b100 *"
b100 ~
b100 t
b100 j
b100 `
b100 V
b100 H"
1%
#62000
0%
#64000
b100 H"
b100 V
b100 `
b100 j
b100 t
b100 ~
b100 *"
b100 4"
b100 >"
1%
#66000
0%
#68000
b100 >"
b100 4"
b100 *"
b100 ~
b100 t
b100 j
b100 `
b100 V
b100 H"
1%
#70000
0%
#72000
b100 H"
b100 V
b100 `
b100 j
b100 t
b100 ~
b100 *"
b100 4"
b100 >"
1%
